import { Component, OnInit } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition } from '@angular/material/snack-bar';
import { Observable } from 'rxjs';
import { Users } from '../../../models/users';
import { AuthenticationService } from '../../../services/authentication.service';
import { UserServiceService } from '../../../services/user-service.service';
import { CreateConfirmDialogComponent } from '../create-confirm-dialog/create-confirm-dialog.component';
import { passwordMatch } from '../custom-validator/password-match';
import { ProfileDialogComponent } from '../profile-dialog/profile-dialog.component';

@Component({
  selector: 'app-create',
  templateUrl: './create.component.html',
  styleUrls: ['./create.component.css']
})
export class CreateComponent implements OnInit {

  titles = ['Mr', 'Mrs'];
  roles = ['admin', 'user'];
  hide: boolean = true; // Hide Password
  confirm_hide: boolean = true; // Hide Confirm Password
  loading: boolean = false; // Loading effect

  constructor( private formBuilder: FormBuilder , private _snackBar: MatSnackBar, public dialog: MatDialog, private userService: UserServiceService, public authentication: AuthenticationService ) { }

  // Llamando el id desde la base de datos
  lastId!: number;

  loggedUser: boolean = false;

  ngOnInit(): void {
    // LoggedUser
    this.loggedUser = this.authentication.isLoggedIn('');
    this.authentication.changeLoginStatus$.subscribe(
      (loggedStatus: boolean) => this.loggedUser = loggedStatus
    );
  }

  // Estructura del Reactive Form
  registroForm = this.formBuilder.group({
    title: ['', [Validators.required]],
    name: ['', [ Validators.required, Validators.pattern('^([a-zA-Z-.]+(?: [a-zA-Z-.]+)?)$') ]],
    lastname: ['', [ Validators.required, Validators.pattern('^([a-zA-Z-.]+(?: [a-zA-Z-.]+)?)$') ]],
    email: ['', [ Validators.required, Validators.pattern('^[a-z0-9+_.-]+@certus.edu.pe$') ]],
    password: ['', [Validators.required, Validators.minLength(8)]],
    confirmPassword: ['', [Validators.required]],
    role: ['', [Validators.required]],
    image: ['', [Validators.required]],
  }, { validators: [passwordMatch('password', 'confirmPassword')]}); // Custom validator

  get title(){ return this.registroForm.get('title') };
  get name(){ return this.registroForm.get('name') };
  get lastname(){ return this.registroForm.get('lastname') };
  get email(){ return this.registroForm.get('email') };
  get password(){ return this.registroForm.get('password') };
  get confirmPassword(){ return this.registroForm.get('confirmPassword') };
  get role(){ return this.registroForm.get('role') };
  get image(){ return this.registroForm.get('image') };


  // Función para elegir una foto de perfil

  chooseProfilePicture(): void {
    const dialogRef = this.dialog.open(ProfileDialogComponent, {
      width: '400px',
      data: {name: this.name?.value, image: this.image?.value}
    });

    dialogRef.afterClosed().subscribe(result => {
      this.registroForm.get('image')?.setValue(result);
    });
  }


  //Generar el metodo submit para registrar los datos del formulario en una array
  datos = new Array;

  onSubmit(){
    this.datos = [{
      'id': 0,
      'title': this.title?.value,
      'name': this.name?.value,
      'lastname': this.lastname?.value,
      'email': this.email?.value,
      'password': this.password?.value,
      'role': this.role?.value,
      'image': this.image?.value
    }];

    this.userService.postUser(this.datos[0]).subscribe(
      (user: Users) => console.log(user)
    )
  }

  listoParaEnviar: boolean = false;

  // _snackBar Position
  horizontalPosition: MatSnackBarHorizontalPosition = 'center';
  verticalPosition: MatSnackBarVerticalPosition = 'top';

  SendForm(){
    if(!this.registroForm.valid && !this.listoParaEnviar){
      this._snackBar.open('Por favor, rellene todos los campos correctamente', 'Cerrar', {
        duration: 3000,
        horizontalPosition: this.horizontalPosition,
        verticalPosition: this.verticalPosition,
      });

      return;
    } else {
      this.loading = true;
      this.onSubmit();
      
      setTimeout(() => {
        this._snackBar.open('El registro se ha creado con éxito', 'Cerrar', {
          duration: 3000,
          horizontalPosition: this.horizontalPosition,
          verticalPosition: this.verticalPosition,
        });
    
        this.listoParaEnviar = true;
      }, 1500);
      setTimeout(() => {
        this.loading = false;
      }, 1500);
    }

  }

  // Función para autogenerar el email

  autogeneratedEmail!: any;

  AutogenerateEmail(name: any, lastname: any) {
    if(name == '' || lastname == '') {
        this._snackBar.open('Por favor, rellene todos los campos', 'Cerrar', {
        duration: 3000,
        horizontalPosition: this.horizontalPosition,
        verticalPosition: this.verticalPosition,
      });

      return
    } else {
      let newName = name.toLowerCase().charAt(0);
      let newLastname = lastname.toLowerCase().split(' ');
      
      this.autogeneratedEmail = newName + newLastname[0] + '@certus.edu.pe';

      this.registroForm.get('email')?.setValue(this.autogeneratedEmail);

      return
    }

  }

  // Criterio para evitar que el usuario abandone el componente
  SalirDeRuta(): Observable<boolean> | boolean{  
      // Si el input se volvió dirty
      if( this.registroForm.dirty ){
        const dialogRef = this.dialog.open(CreateConfirmDialogComponent);
        return dialogRef.afterClosed();
      }

      return true;
  }

}
